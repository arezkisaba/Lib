# Universal Windows Platform
# Build a Universal Windows Platform project using Visual Studio.
# Add steps that test and distribute an app, save build artifacts, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'x86'
  buildConfiguration: 'Debug'
  appxPackageDir: '$(Build.ArtifactStagingDirectory)/AppxPackages'
  webPackageDir: '$(Build.ArtifactStagingDirectory)/WebPackages'
  nugetPackageDir: '$(Build.ArtifactStagingDirectory)/NugetPackages'

steps:

- task: NuGetToolInstaller@1
  enabled: true
  displayName: Nuget installation

- task: NuGetCommand@2
  enabled: true
  displayName: Nuget restore
  inputs:
    command: 'restore'
    restoreSolution: '$(solution)'
    feedsToUse: 'select'
    vstsFeed: 'f48150d8-bc5e-41fc-9295-d308720814c6'
    noCache: true
    verbosityRestore: 'Normal'

- task: VSBuild@1
  enabled: true
  displayName: Build solution
  inputs:
    solution: '$(solution)'
    msbuildArgs: '/p:AppxBundlePlatforms="$(buildPlatform)" /p:AppxPackageDir="$(appxPackageDir)" /p:AppxBundle=Always /p:UapAppxPackageBuildMode=StoreUpload'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

- task: DotNetCoreCLI@2
  enabled: true
  displayName: Dotnet publish on [Lib.WebApi]
  inputs:
    command: 'publish'
    publishWebProjects: false
    projects: '$(Build.SourcesDirectory)/Lib/Lib.Samples/Lib.WebApi/Lib.WebApi/*.csproj'
    arguments: '-c Debug -o $(webPackageDir)'

- task: DotNetCoreCLI@2
  enabled: false
  displayName: Dotnet test on [Lib.Core.UnitTests]
  inputs:
    command: 'test'
    projects: '$(Build.SourcesDirectory)/Lib/Lib.Core/Lib.Core.UnitTests/*.csproj'

- task: DotNetCoreCLI@2
  enabled: true
  displayName: Dotnet test on [Lib.ApiServices.Rss.UnitTests]
  inputs:
    command: 'test'
    projects: '$(Build.SourcesDirectory)/Lib/Lib.ApiServices.Rss/Lib.ApiServices.Rss.UnitTests/*.csproj'
    
- task: DotNetCoreCLI@2
  enabled: true
  displayName: Dotnet pack on [Lib.ApiServices.Kodi]
  inputs:
    command: 'custom'
    projects: '$(Build.SourcesDirectory)/Lib/Lib.ApiServices.Kodi/Lib.ApiServices.Kodi/*.csproj'
    custom: 'pack'
    arguments: '-c "$(buildConfiguration)" -o "$(nugetPackageDir)/Lib.ApiServices.Kodi" -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg'

- task: DotNetCoreCLI@2
  enabled: true
  displayName: Dotnet pack on [Lib.ApiServices.OpenWeatherMap]
  inputs:
    command: 'custom'
    projects: '$(Build.SourcesDirectory)/Lib/Lib.ApiServices.OpenWeatherMap/Lib.ApiServices.OpenWeatherMap/*.csproj'
    custom: 'pack'
    arguments: '-c "$(buildConfiguration)" -o "$(nugetPackageDir)/Lib.ApiServices.OpenWeatherMap" -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg'

- task: DotNetCoreCLI@2
  enabled: true
  displayName: Dotnet pack on [Lib.ApiServices.Plex]
  inputs:
    command: 'custom'
    projects: '$(Build.SourcesDirectory)/Lib/Lib.ApiServices.Plex/Lib.ApiServices.Plex/*.csproj'
    custom: 'pack'
    arguments: '-c "$(buildConfiguration)" -o "$(nugetPackageDir)/Lib.ApiServices.Plex" -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg'

- task: DotNetCoreCLI@2
  enabled: true
  displayName: Dotnet pack on [Lib.ApiServices.Rss]
  inputs:
    command: 'custom'
    projects: '$(Build.SourcesDirectory)/Lib/Lib.ApiServices.Rss/Lib.ApiServices.Rss/*.csproj'
    custom: 'pack'
    arguments: '-c "$(buildConfiguration)" -o "$(nugetPackageDir)/Lib.ApiServices.Rss" -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg'

- task: DotNetCoreCLI@2
  enabled: true
  displayName: Dotnet pack on [Lib.ApiServices.TeamFoundationServer]
  inputs:
    command: 'custom'
    projects: '$(Build.SourcesDirectory)/Lib/Lib.ApiServices.TeamFoundationServer/Lib.ApiServices.TeamFoundationServer/*.csproj'
    custom: 'pack'
    arguments: '-c "$(buildConfiguration)" -o "$(nugetPackageDir)/Lib.ApiServices.TeamFoundationServer" -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg'
    
- task: DotNetCoreCLI@2
  enabled: true
  displayName: Dotnet pack on [Lib.ApiServices.TheMovieDatabase]
  inputs:
    command: 'custom'
    projects: '$(Build.SourcesDirectory)/Lib/Lib.ApiServices.TheMovieDatabase/Lib.ApiServices.TheMovieDatabase/*.csproj'
    custom: 'pack'
    arguments: '-c "$(buildConfiguration)" -o "$(nugetPackageDir)/Lib.ApiServices.TheMovieDatabase" -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg'

- task: DotNetCoreCLI@2
  enabled: true
  displayName: Dotnet pack on [Lib.ApiServices.Torrents]
  inputs:
    command: 'custom'
    projects: '$(Build.SourcesDirectory)/Lib/Lib.ApiServices.Torrents/Lib.ApiServices.Torrents/*.csproj'
    custom: 'pack'
    arguments: '-c "$(buildConfiguration)" -o "$(nugetPackageDir)/Lib.ApiServices.Torrents" -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg'

- task: DotNetCoreCLI@2
  enabled: true
  displayName: Dotnet pack on [Lib.ApiServices.Trakt]
  inputs:
    command: 'custom'
    projects: '$(Build.SourcesDirectory)/Lib/Lib.ApiServices.Trakt/Lib.ApiServices.Trakt/*.csproj'
    custom: 'pack'
    arguments: '-c "$(buildConfiguration)" -o "$(nugetPackageDir)/Lib.ApiServices.Trakt" -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg'

- task: DotNetCoreCLI@2
  enabled: true
  displayName: Dotnet pack on [Lib.ApiServices.Transmission]
  inputs:
    command: 'custom'
    projects: '$(Build.SourcesDirectory)/Lib/Lib.ApiServices.Transmission/Lib.ApiServices.Transmission/*.csproj'
    custom: 'pack'
    arguments: '-c "$(buildConfiguration)" -o "$(nugetPackageDir)/Lib.ApiServices.Transmission" -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg'

- task: DotNetCoreCLI@2
  enabled: true
  displayName: Dotnet pack on [Lib.Core]
  inputs:
    command: 'custom'
    projects: '$(Build.SourcesDirectory)/Lib/Lib.Core/Lib.Core/*.csproj'
    custom: 'pack'
    arguments: '-c "$(buildConfiguration)" -o "$(nugetPackageDir)/Lib.Core" -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg'

- task: DotNetCoreCLI@2
  enabled: true
  displayName: Dotnet pack on [Lib.Win32]
  inputs:
    command: 'custom'
    projects: '$(Build.SourcesDirectory)/Lib/Lib.Win32/Lib.Win32/*.csproj'
    custom: 'pack'
    arguments: '-c "$(buildConfiguration)" -o "$(nugetPackageDir)/Lib.Win32" -p:IncludeSymbols=true -p:SymbolPackageFormat=snupkg'

- task: NuGetCommand@2
  enabled: true
  displayName: Nuget pack on [Lib.Uwp]
  inputs:
    command: 'custom'
    arguments: 'pack "$(Build.SourcesDirectory)/Lib/Lib.Uwp/Lib.Uwp/Lib.Uwp.nuspec" -OutputDirectory "$(nugetPackageDir)/Lib.Uwp" -Symbols -SymbolPackageFormat snupkg'

- task: NuGetCommand@2
  enabled: true
  displayName: Nuget push
  inputs:
    command: 'push'
    packagesToPush: '"$(nugetPackageDir)/**/*.nupkg"'
    nuGetFeedType: 'internal'
    publishVstsFeed: 'f48150d8-bc5e-41fc-9295-d308720814c6'
    publishPackageMetadata: false
    allowPackageConflicts: true
    verbosityPush: 'Normal'

- task: PublishSymbols@2
  enabled: true
  displayName: Nuget symbols publish
  inputs:
    SymbolsFolder: '$(Build.SourcesDirectory)'
    SearchPattern: '**/bin/**/*.pdb'
    SymbolServerType: 'TeamServices'

- task: PublishBuildArtifacts@1
  enabled: true
  displayName: Artifacts publish
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'

- task: PowerShell@2
  enabled: true
  displayName: Github Sync
  inputs:
    targetType: 'inline'
    script: 'git push https://$(GithubUsername):$(GithubPassword)@github.com/arezkisaba/Lib.git HEAD:master'
